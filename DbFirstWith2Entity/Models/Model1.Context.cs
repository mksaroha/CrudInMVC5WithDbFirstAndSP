//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DbFirstWith2Entity.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DbFirstDatabaseEntities : DbContext
    {
        public DbFirstDatabaseEntities()
            : base("name=DbFirstDatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Student> Students { get; set; }
    
        public virtual ObjectResult<UDP_GetAllEmployee_Result> UDP_GetAllEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDP_GetAllEmployee_Result>("UDP_GetAllEmployee");
        }
    
        public virtual ObjectResult<UDP_GetAllEmployees_Result> UDP_GetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDP_GetAllEmployees_Result>("UDP_GetAllEmployees");
        }
    
        public virtual int UDP_AddStudent(string name, string city, Nullable<int> courseId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UDP_AddStudent", nameParameter, cityParameter, courseIdParameter);
        }
    
        public virtual int UDP_DeleteStudent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UDP_DeleteStudent", idParameter);
        }
    
        public virtual ObjectResult<UDP_GetStudent_Result> UDP_GetStudent(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDP_GetStudent_Result>("UDP_GetStudent", idParameter);
        }
    
        public virtual ObjectResult<UDP_GetStudents_Result> UDP_GetStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UDP_GetStudents_Result>("UDP_GetStudents");
        }
    
        public virtual int UDP_UpdateStudent(Nullable<int> id, string name, string city, Nullable<int> courseId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("courseId", courseId) :
                new ObjectParameter("courseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UDP_UpdateStudent", idParameter, nameParameter, cityParameter, courseIdParameter);
        }
    
        public virtual ObjectResult<Course> GetAllCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("GetAllCourse");
        }
    
        public virtual ObjectResult<Course> GetAllCourse(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Course>("GetAllCourse", mergeOption);
        }
    
        public virtual int USP_UpdateEmployee(Nullable<int> id, string name, Nullable<System.DateTime> dob, string gender, string city, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateEmployee", idParameter, nameParameter, dobParameter, genderParameter, cityParameter, isActiveParameter);
        }
    }
}
